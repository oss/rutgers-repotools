#!/usr/bin/env python2
"""
This script checks the sanity of the Rutgers repository structure. In
particular, it makes sure there is no package newer in stable than testing, or
newer in testing than unstable.

This script is run by daily_checks by default; however, you can still run it on
your own on the command line whenever necessary.
"""

from pkg_resources import parse_version

import ConfigParser
import argparse
import os
import smtplib
import sys


def show_error(distname, distver, mailto, smtp_host, error, no_mail=False):
    """
    Raise an error, optionally sending mail.
    """
    sys.stderr.write(error)
    if not no_mail:
        send_mail(distname, distver, mailto, smtp_host, error)
    sys.exit(1)


def send_mail(distname, distver, mailto, smtp_host, message):
    """
    Utility function for sending mail.
    """
    mailfrom = "repocheck_rutgers@omachi.rutgers.edu"
    subject = "{0} {1} Repository Check".format(distname, distver)
    body = """
{0}
-------------------------------------------------------------------------------

{1}

-------------------------------------------------------------------------------
This report generated by repocheck_rutgers on omachi, a proud member of the
Rutgers Repository Tools family.

For more information, see https://github.com/oss/rutgers-repotools.
    """.format(subject, message)
    msg = "From: {0}\r\nTo: {1}\r\nSubject: {2}\r\n{3}\r\n"
    server = smtplib.SMTP(smtp_host)
    server.sendmail(mailfrom,
                   [mailto],
                   msg.format(mailfrom, mailto, subject, body))
    server.quit()


def check_repo(oldrepo, newrepo, oldrepo_name, newrepo_name):
    """
    Checks the older repository against the newer one for conflicting packages.
    """
    output = []
    test_srpms = {}

    # Put the RPMs in the newer repository into the dictionary
    for filename in os.listdir(newrepo + "/SRPMS/"):
        if filename.endswith(".src.rpm"):
            filename = filename.replace(".src.rpm", "")
            parts = filename.split("-")
            # last 2 fields are version #, rest are package name
            pkgname =  "-".join(parts[:-2])
            pkgver  =  "-".join(parts[-2:])
            test_srpms[pkgname] = pkgver

    # Look for something in the older repo that's newer than the new repo
    for filename in os.listdir(oldrepo + "/SRPMS/"):
        if filename.endswith(".src.rpm"):
            filename = filename.replace(".src.rpm", "")
            parts = filename.split("-")
            pkgname =  "-".join(parts[:-2])
            pkgver  =  "-".join(parts[-2:])
            if pkgname in test_srpms and \
               parse_version(pkgver) > parse_version(test_srpms[pkgname]):
                   message = "{0} is version {1} in {2}, which is newer than" \
                             " {3} in {4}"
                   output.append(message.format(pkgname,
                                                pkgver,
                                                oldrepo_name,
                                                test_srpms[pkgname],
                                                newrepo_name))
    return (len(output), "\n".join(output))


if __name__=="__main__":
    # Grab the command line options
    parser = argparse.ArgumentParser(
            prog="repocheck",
            description="repocheck - Checks repository sanity",
            epilog="Made by Rutgers Open System Solutions.")
    parser.add_argument(
            "version",
            help="The distribution version to check.")
    parser.add_argument(
            "--no-mail",
            action="store_true",
            help="Suppress sending mail after the check.")
    parser.add_argument(
            "-c",
            "--config-file",
            default="/etc/rutgers-repotools.cfg",
            help="The configuration file to use.")
    parser.add_argument(
            "-u",
            "--check-unstable",
            action="store_true",
            help="Check problems between unstable and testing. Off by default.")

    # Parse the arguments and set up the namespace
    args = parser.parse_args()
    check_unstable = args.check_unstable
    config_file = args.config_file
    no_mail = args.no_mail
    version = args.version

    # Yes, this is a race condition, but it should suffice for this script
    if config_file is None or not os.path.isfile(config_file):
        sys.stderr.write("Error: Configuration file not found.")
        sys.exit(1)

    # Options from the configuration file
    config = ConfigParser.ConfigParser()
    config.read(config_file)
    distname = config.get("repositories", "distname_nice")
    repodir = config.get("repositories", "repodir_private")
    mailto = config.get("report", "to_addr")
    smtp_host = config.get("report", "smtp_host")

    # Get the location of the physical repositories
    stable_repo = "{0}rutgers/{1}".format(repodir, version)
    testing_repo = "{0}rutgers-testing/{1}".format(repodir, version)
    unstable_repo = "{0}rutgers-unstable/{1}".format(repodir, version)

    # Sanity checks
    if version not in config.get("repositories", "alldistvers"):
        error = "Error: {0} is not a valid version of {1}.".format(version,
                                                                   distname)
        show_error(distname, version, mailto, smtp_host, error)
    elif not os.path.isdir(stable_repo) or not os.path.isdir(testing_repo):
        error = "Error: Repositories for {0} {1} must be regenerated.".format(
                distname, version)
        show_error(distname, version, mailto, smtp_host, error)
    elif not check_unstable and os.path.isdir(unstable_repo):
        error = "Error: Unstable repo for {0} {1} must be regenerated.".format(
                distname, version)
        show_error(distname, version, mailto, smtp_host, error)

    # Check the stable and testing repositories
    output = []
    problems, result = check_repo(stable_repo, testing_repo,
                                  "stable", "testing")
    if problems > 0:
        print "Found {0} issue(s) between stable and testing.".format(problems)

    # Extra check between unstable and testing
    if check_unstable:
        unstable_prob, unstable_res = check_repo(testing_repo, unstable_repo,
                                                 "testing", "unstable")
        if unstable_prob > 0:
            print "Found {0} issue(s) between testing and unstable.".format(
                    unstable_prob)
            problems += unstable_prob
            result += "\n" + unstable_res

    # Finally, generate the report
    if problems == 0:
        print "{0} {1} repositories are sane.".format(distname, version)
    else:
        output.append("Total problems found: {0}".format(problems))
        output.append("The following {0} {1} packages have problems:\n".format(
            distname, version))
        output.append(result)
        report = "\n".join(output)
        if no_mail:
            print report
        else:
            send_mail(distname, version, mailto, smtp_host, report)
            print "Mail sent to {0}.".format(mailto)
